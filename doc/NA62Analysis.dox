/// \page analysis NA62Analysis
/// 
/// This framework need Geant4, ROOT and NA62MC to be compiled and has been tested with the following versions :<br>
/// <ul>
/// 	<li>gcc 4.6.3 | 4.1.2
/// 	<li>Geant4.9.5p03
/// 	<li>ROOT 5.34.04 | 5.34.05
/// 	<li>NA62MC rev_245, rev_255, rev_263
/// </ul>
/// Take care of compiling each of these with the same version of gcc.
/// Although only tested with these versions, it's most likely to work without problem on any other versions
/// 
/// Before starting to work with the framework, you should set the NA62MCSOURCE environment variable to point to the directory where you keep your sources of NA62MC. 
/// 
/// \section Installation Installation
/// <ul>
/// 	<li>Extract the sources from the svn repository<br>
/// 		<br><code><b>svn co svn co svn+ssh://svn.cern.ch/reps/na62fw/trunk/NA62Analysis</b></code><br><br>
/// 	<li>Make sure the <b>NA62MCSOURCE</b> environment variable points to the directory containing <b>NA62MC</b>
/// 	<li>Setup the environment<br>
/// 		<br><code><b>source scripts/env.[c]sh</b></code><br>
/// 	<li>Prepare your user directory by issuing<br>
/// 		<br><code><b>./NA62AnalysisBuilder.py prepare PathToUserDir</b></code><br><br>
/// 		Your user directory can be anywhere except in the same directory than this framework. It should ideally be 
/// 		kept separate to avoid overwriting any of your work when updating the framework. If any update is needed inside your
/// 		user directory, the NA62AnalysisBuilder.py tool will take care of it automatically.
/// 	<li>Go inside your user directory, check that scripts/env.[c]sh is correct.
/// 	<li>The framework is now installed. After sourcing the scripts/env.[c]sh script the framework directory is added to the <b>PATH</b>.<br> 
/// 		You should be able to run the framework from your user directory without ever going back to the framework directory. 
/// 		All the python scripts are also directly available from your user directory.
/// </ul>
/// 
/// \section rebuild Clean rebuild	
/// If you change NA62MC or NA62Reconstruction, you should rebuild the framework.
/// <ul>
/// 	<li> Go in your user directory and setup the environment<br>
/// 		<br><code><b>source scripts/env.[c]sh</b></code><br>
/// 	<li>Clean the current build<br>
/// 		<br><code><b>NA62AnalysisBuilder.py cleanAll</b></code><br><br>
/// 	<li>The libraries will be recompiled next time you will try to build and executable with<br>
/// 		<br><code><b>NA62AnalysisBuilder.py configFileName</b></code><br><br>
/// 
/// \section update Update
/// To update the framework, just go inside the framework directory and issue<br>
/// <br><code><b>svn update</b></code><br><br>
/// The next time you try to build and executable with<br>
/// <br><code><b>NA62AnalysisBuilder.py configFileName</b></code><br><br>
/// the libraries will be recompiled and eventual changes in your user directory will be safely done automatically.
/// In case of problem you will see a warning message and inform you on the appropriate actions to manually solve the problem.
/// In case of compilation problem you can try a complete clean rebuild of the framework. See \ref rebuild
/// 
/// \section QuickStart QuickStart
/// 
/// <ul>
/// 	<li>NA62AnalysisBuilder.py help				: will print the help of the NA62AnalysisBuilder.py script<br>
/// 	<li>NA62AnalysisBuilder.py available			: will return the list of available Analyzers<br>
/// 	<li>NA62AnalysisBuilder.py cleanUser	 		: will remove all files generated by the build in the user directory<br>
/// 	<li>NA62AnalysisBuilder.py cleanFW	 		: will remove all files generated by the build in the FW directory<br>
/// 	<li>NA62AnalysisBuilder.py new AnalyzerName		: will create a new analyzer with name AnalyzerName in the user directory<br>
/// 	<li>NA62AnalysisBuilder.py rename oldName newName	: will rename a user analyzer<br>
/// 	<li>NA62AnalysisBuilder.py configFileName		: will build the FW using the configuration file configFileName<br>
/// 	<li>NA62AnalysisBuilder.py prepare path			: will prepare a user directory at the specified path<br>
///	<li>NA62AnalysisBuilder.py examples			: will build the libraries for examples and import the configuration files in user directory<br>
/// </ul>
/// 
/// If you want to write a new analyzer on MC simulation or reconstruction coming from NA62MC or NA62Analysis:
/// <ol>
///	<li> Go in your user directory (<b>PathToUserDir</b>) and setup the environment<br>
/// 		<br><code><b>source scripts/env.[c]sh</b></code><br>
/// 	<li> Create a new analyzer with<br>
/// 		<br><code><b>NA62AnalysisBuilder.py new analyzer-Name</b></code><br><br>
/// 	<li> Write your analyzer. The header and source files are<br> 
/// 		<br><code>PathToUserDir/Analyzer/include/analyzer-Name.hh<br>
/// 		PathToUserDir/Analyzer/src/analyzer-Name.cc</code><br>
///          In PathToUserDir there is also a preformatted runtime configuration file
/// </ol>
/// 
/// If you want to run the program with a set of analyzers
/// <ol>
/// 	<li> Go in you user directory (PathToUserDir) and setup the environment<br>
/// 		<br><code><b>source scripts/env.[c]sh</b></code><br>
/// 	<li> Create a config file containing the following line:<br>
/// 		<br><code>exec = name-Of-Executable-To-Generate<br>
/// 		analyzers = List-Of-Analyzer-You-Want-To-Run-Separated-By-White-Spaces<br>
/// 		libs = List-Of-Additional-Libraries-To-Link-With<br>
/// 		libsdirs = List-Of-Additional-Directories-To-Search-For-Libraries<br>
/// 		incdirs = List-Of-Additional-Directories-To-Search-For-Include-Files</code><br><br>
/// 	<li> Compile in the user directory with <br>
/// 		<br><code><b>NA62AnalysisBuilder.py configFileName</b></code><br><br>
/// 	<li> Run with <br>
/// 		<br><code>./yourExecutableName [-hg] <-i InputFile | -l InpuFilesList> [-B NumberOfFilesToProcess] [-n FirstEvent]<br>
/// 		 [-N NumberOfEvents] [-o OutputFile] [-v verbosity] <br>
/// 		 [-p "analyzer:param=val;param=val&analyzer:param=val&..."] [-c configFile] [-h]</code><br>
/// </ol>
/// 
/// The runtime configuration file will advantageously replace long list of command line parameters 
/// (with -p). The format of the configuration file is the following:<br> 
/// 
/// <ul>
/// <code>
/// [[analyzer-Name]]<br>
/// Parameter1 = value1<br>
/// Parameter2 = value2<br>
/// <br>
/// [[analyzer-Name2]]<br>
/// ...<br>
/// ...<br>
/// ...<br>
/// </code>
/// </ul>
///
/// The following parameters exist by default for all analyzers:
/// <ul>
/// 	<li><b>Verbose</b> (default=kNo, possible kNo, kUser, kNormal, kDebug)
/// 	<li><b>AutoUpdate</b> (takes a list of plots names. They will be drawn on screen during processing and refreshed at regular interval)
/// 	<li><b>UpdateInterval</b> (default=10, refresh interval for AutoUpdate plots in number of events)
/// </ul>
///
