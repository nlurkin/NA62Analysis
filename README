
An HTML form of this documentation can be found online at
  http://sergiant.web.cern.ch/sergiant/NA62FW/html/analysis.html

Requirements
------------

This framework need Geant4, ROOT and NA62MC to be compiled and has been tested
with the following versions :
	gcc 4.6.3 | 4.1.2
	Geant4.9.5p03
	ROOT 5.34.04 | 5.34.05
	NA62MC rev_245, rev_255, rev_263

Take care of compiling each of these with the same version of gcc.
Although only tested with these versions, it's most likely to work without 
problem on any other versions

Before starting to work with the framework, you should set the NA62MCSOURCE 
environment variable to point to the directory where you keep your sources 
of NA62MC. 

Glossary
--------
NA62Analysis is divided into two distinct directory trees
  o [FWDir] Framework directory: Contains NA62Analysis itself (what you get from svn).
    You should never have the need to work in this directory.
  o [UserDir] User directory: Work directory that contains your own work (your analyzers, configurations, executables, ...)

Installation
------------

  o Extract the sources from the svn repository
      svn co svn co svn+ssh://svn.cern.ch/reps/na62fw/trunk/NA62Analysis

  o Make sure the NA62MCSOURCE environment variable points to the directory 
    containing NA62MC

  o Setup the environment
      source scripts/env.[c]sh

  o Prepare your user directory[UserDir] by issuing
      ./NA62AnalysisBuilder.py prepare PathToUserDir
    Your user directory[UserDir] can be anywhere except in the same directory than 
    this framework. It should ideally be kept separate to avoid overwriting 
    any of your work when updating the framework. If any update is needed 
    inside your	user directory, the NA62AnalysisBuilder.py tool will take 
    care of it automatically.

  o Go inside your user directory[UserDir], check that scripts/env.[c]sh is correct.

  o The framework is now installed. After sourcing the scripts/env.[c]sh script 
    the framework directory[FWDir] is added to the PATH.
    You should be able to run the framework from your user directory[UserDir] without 
    ever going back to the framework directory[FWDir]. 
    All the python scripts are also directly available from your user directory.

Clean rebuild
-------------	

If you change NA62MC or NA62Reconstruction, you should rebuild the framework.

  o Go in your user directory[UserDir] and setup the environment
      source scripts/env.[c]sh

  o Clean the current build
      NA62AnalysisBuilder.py cleanAll

  o The libraries will be recompiled next time you will try to build and 
    executable with
      NA62AnalysisBuilder.py configFileName

Update
------

To update the framework, just go inside the framework directory[FWDir] and issue
  svn update

The next time you try to build an executable with
  NA62AnalysisBuilder.py configFileName
the libraries will be recompiled and eventual changes in your user directory[UserDir] 
will be safely done automatically. In case of problem you will see a warning 
message and inform you on the appropriate actions to manually solve the problem.

In case of compilation problem you can try a complete clean rebuild of the 
framework. See the 'Clean rebuild' section.

QuickStart
----------

  o NA62AnalysisBuilder.py help
        will print the help of the NA62AnalysisBuilder.py script

  o NA62AnalysisBuilder.py available
        will return the list of available Analyzers

  o NA62AnalysisBuilder.py cleanUser
        will remove all files generated by the build in the user directory[UserDir]

  o NA62AnalysisBuilder.py cleanFW
        will remove all files generated by the build in the FW directory[FWDir]

  o NA62AnalysisBuilder.py new AnalyzerName
        will create a new analyzer with name AnalyzerName in the user directory[UserDir]
        Alternatively AnalyzerName can be replaced by the following syntax: 
        	AnalyzerName(InputType TreeName, ...)
        This will already include the correct persistency headers, request the input tree and 
        retrieve the input events.
        Example: Creating an analyzer named toto using as input the GigaTracker MonteCarlo and 
        LKr and Spectrometer RECO
        	NA62AnalysisBuilder.py new "toto(MC GigaTracker, Reco LKr, Reco Spectrometer)"

  o NA62AnalysisBuilder.py rename oldName newName
        will rename a user analyzer

  o NA62AnalysisBuilder.py configFileName
        will build the FW using the configuration file configFileName

  o NA62AnalysisBuilder.py prepare path
        will prepare a user directory at the specified path

  o NA62AnalysisBuilder.py examples
        will build the libraries for examples and import the configuration 
        files in user directory[UserDir]

If you want to write a new analyzer on MC simulation or reconstruction coming from NA62MC or NA62Analysis:
  o Go in your user directory[UserDir] and setup the environment
      source scripts/env.[c]sh

  o Create a new analyzer with
      NA62AnalysisBuilder.py new analyzer-Name

  o Write your analyzer. The header and source files are
      PathToUserDir/Analyzer/include/analyzer-Name.hh
      PathToUserDir/Analyzer/src/analyzer-Name.cc
    In [UserDir] there is also a preformatted runtime configuration file

If you want to run the program with a set of analyzers
  o Go in you user directory (PathToUserDir) and setup the environment
      source scripts/env.[c]sh

  o Create a config file containing the following line:
      exec = name-Of-Executable-To-Generate
      analyzers = List-Of-Analyzer-You-Want-To-Run-Separated-By-White-Spaces
      libs = List-Of-Additional-Libraries-To-Link-With
      libsdirs = List-Of-Additional-Directories-To-Search-For-Libraries
      incdirs = List-Of-Additional-Directories-To-Search-For-Include-Files
      
      If one of the analyzer specified in the list does not exist, a prompt will propose you
      to create it. For this reason, the syntax 
      	AnalyzerName(InputType TreeName, ...)
      is valid in the config file as well.

  o Compile in the user directory with
      NA62AnalysisBuilder.py configFileName

  o Run with
      ./yourExecutableName [-hg] <-i InputFile | -l InpuFilesList> 
                           [-B NumberOfFilesToProcess] [-n FirstEvent]
                           [-N NumberOfEvents] [-o OutputFile] [-v verbosity]
                           [-p "analyzer:param=val;param=val&analyzer:param=val&..."]
                           [-c configFile] [-h]

The runtime configuration file will advantageously replace long list of command line parameters 
(with -p). The format of the configuration file is the following:
    [[analyzer-Name]]
    Parameter1 = value1
    Parameter2 = value2
    
    [[analyzer-Name2]]
    ...
    ...
    ...

The following parameters exist by default for all analyzers:
  o Verbose (default=kNo, possible kNo, kUser, kNormal, kDebug)
  o AutoUpdate (takes a list of plots names. They will be drawn on screen during processing
  	and refreshed at regular interval)
  o UpdateInterval (default=10, refresh interval for AutoUpdate plots in number of events)


Troubleshooting
---------------

  o If you are experiencing strange problems with compilation and linking, first try a
      NA62AnalysisBuilder.py cleanAll
    before trying to recompile the framework. Problems sometimes happens after changing 
    version of ROOT, NA62MC, ... or when some framework libraries were not recompiled 
    automatically after modifications in the code. 
    